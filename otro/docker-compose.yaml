name: airflow-lab
services:
  airflow-init:
    command:
    - -c
    - |
      function ver() {
        printf "%04d%04d%04d%04d" $${1//./ }
      }
      airflow_version=$$(gosu airflow airflow version)
      airflow_version_comparable=$$(ver $${airflow_version})
      min_airflow_version=2.2.0
      min_airflow_version_comparable=$$(ver $${min_airflow_version})
      if (( airflow_version_comparable < min_airflow_version_comparable )); then
        echo
        echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        echo
        exit 1
      fi
      if [[ -z "1000" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        echo "If you are on Linux, you SHOULD follow the instructions below to set "
        echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
        echo "For other operating systems you can get rid of the warning with manually created .env file:"
        echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
        echo
      fi
      one_meg=1048576
      mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
      cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
      disk_available=$$(df / | tail -1 | awk '{print $$4}')
      warning_resources="false"
      if (( mem_available < 4000 )) ; then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
        echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
        echo
        warning_resources="true"
      fi
      if (( cpus_available < 2 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
        echo "At least 2 CPUs recommended. You have $${cpus_available}"
        echo
        warning_resources="true"
      fi
      if (( disk_available < one_meg * 10 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
        echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
        echo
        warning_resources="true"
      fi
      if [[ $${warning_resources} == "true" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
        echo "Please follow the instructions to increase amount of resources available:"
        echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
        echo
      fi
      mkdir -p /sources/logs /sources/dags /sources/plugins
      chown -R "1000:0" /sources/{logs,dags,plugins}
      exec /entrypoint airflow version
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint:
    - /bin/bash
    environment:
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    image: apache/airflow:2.2.4
    networks:
      default: null
    user: "0:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab
      target: /sources
      bind:
        create_host_path: true
  airflow-scheduler:
    command:
    - scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      statsd-exporter:
        condition: service_healthy
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"
      timeout: 10s
      interval: 10s
      retries: 5
    image: apache/airflow:2.2.4
    networks:
      default: null
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/dags
      target: /opt/airflow/dags
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/logs
      target: /opt/airflow/logs
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/plugins
      target: /opt/airflow/plugins
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/airflow.cfg
      target: /opt/airflow/airflow.cfg
      bind:
        create_host_path: true
  airflow-triggerer:
    command:
    - triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"
      timeout: 10s
      interval: 10s
      retries: 5
    image: apache/airflow:2.2.4
    networks:
      default: null
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/dags
      target: /opt/airflow/dags
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/logs
      target: /opt/airflow/logs
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/plugins
      target: /opt/airflow/plugins
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/airflow.cfg
      target: /opt/airflow/airflow.cfg
      bind:
        create_host_path: true
  airflow-webserver:
    command:
    - webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/health
      timeout: 10s
      interval: 10s
      retries: 5
    image: apache/airflow:2.2.4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8080
      published: "8080"
      protocol: tcp
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/dags
      target: /opt/airflow/dags
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/logs
      target: /opt/airflow/logs
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/plugins
      target: /opt/airflow/plugins
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/airflow.cfg
      target: /opt/airflow/airflow.cfg
      bind:
        create_host_path: true
  airflow-worker:
    command:
    - celery
    - worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
      - CMD-SHELL
      - celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"
      timeout: 10s
      interval: 10s
      retries: 5
    image: apache/airflow:2.2.4
    networks:
      default: null
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/dags
      target: /opt/airflow/dags
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/logs
      target: /opt/airflow/logs
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/plugins
      target: /opt/airflow/plugins
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/airflow.cfg
      target: /opt/airflow/airflow.cfg
      bind:
        create_host_path: true
  flower:
    command:
    - celery
    - flower
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
      AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ""
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:5555/
      timeout: 10s
      interval: 10s
      retries: 5
    image: apache/airflow:2.2.4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5555
      published: "5555"
      protocol: tcp
    restart: always
    user: "1000:0"
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/dags
      target: /opt/airflow/dags
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/logs
      target: /opt/airflow/logs
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/plugins
      target: /opt/airflow/plugins
      bind:
        create_host_path: true
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/airflow.cfg
      target: /opt/airflow/airflow.cfg
      bind:
        create_host_path: true
  grafana:
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafana
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    image: grafana/grafana:6.7.2
    networks:
      default: null
    ports:
    - mode: ingress
      target: 3000
      published: "3000"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: grafana_data
      target: /var/lib/grafana
      volume: {}
  postgres:
    environment:
      POSTGRES_DB: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_USER: airflow
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - airflow
      interval: 5s
      retries: 5
    image: postgres:13
    networks:
      default: null
    restart: always
    volumes:
    - type: volume
      source: postgres-db-volume
      target: /var/lib/postgresql/data
      volume: {}
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yaml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    image: prom/prometheus:v2.26.0
    networks:
      default: null
    ports:
    - mode: ingress
      target: 9090
      published: "9092"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/prometheus.yaml
      target: /etc/prometheus/prometheus.yaml
      bind:
        create_host_path: true
    - type: volume
      source: prometheus_data
      target: /prometheus
      volume: {}
  redis:
    expose:
    - "6379"
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      timeout: 30s
      interval: 5s
      retries: 50
    image: redis:latest
    networks:
      default: null
    restart: always
  statsd-exporter:
    command:
    - statsd_exporter --log.level debug --statsd.mapping-config=/home/statsd-mapping-configs.yaml
    entrypoint:
    - /bin/sh
    - -c
    - --
    image: prom/statsd-exporter:v0.21.0
    networks:
      default: null
    ports:
    - mode: ingress
      target: 9102
      published: "9102"
      protocol: tcp
    - mode: ingress
      target: 9125
      published: "9125"
      protocol: tcp
    restart: always
    volumes:
    - type: bind
      source: /home/edu/mlops/labs/airflow-lab/configs/statsd.yaml
      target: /home/statsd-mapping-configs.yaml
      bind:
        create_host_path: true
networks:
  default:
    name: airflow-lab_default
volumes:
  grafana_data:
    name: airflow-lab_grafana_data
  postgres-db-volume:
    name: airflow-lab_postgres-db-volume
  prometheus_data:
    name: airflow-lab_prometheus_data
x-airflow-common:
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  environment:
    _PIP_ADDITIONAL_REQUIREMENTS: ""
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  image: apache/airflow:2.2.4
  user: "1000:0"
  volumes:
  - ./dags:/opt/airflow/dags
  - ./logs:/opt/airflow/logs
  - ./plugins:/opt/airflow/plugins
  - ./configs/airflow.cfg:/opt/airflow/airflow.cfg
